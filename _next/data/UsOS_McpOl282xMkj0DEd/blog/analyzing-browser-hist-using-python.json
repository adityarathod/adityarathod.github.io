{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h3: \"h3\",\n    em: \"em\"\n  }, _provideComponents(), props.components), {MultiCode, Image} = _components;\n  if (!Image) _missingMdxReference(\"Image\", true);\n  if (!MultiCode) _missingMdxReference(\"MultiCode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Today, we are going to do some spelunking within the deep, dark place which is your browser history.\\nIn order to obtain the data for this tutorial from Google Chrome, go to\\n\", _jsx(_components.code, {\n        children: \"~/Library/Application Support/Google/Chrome/Default\"\n      }), \"\\non a Mac/Linux computer or \", _jsx(_components.code, {\n        children: \"%LocalAppData%\\\\Google\\\\Chrome\\\\User Data\\\\Default\"\n      }), \" on a Windows PC.\\nRun the following SQLite command to obtain a text file in reverse chronological order:\"]\n    }), \"\\n\", _jsx(MultiCode, {\n      tabs: [{\n        name: \"Mac/Linux\",\n        content: `sqlite3 History \"select datetime(last_visit_time/1000000-11644473600,'unixepoch'), url \\\\\nfrom urls order by last_visit_time desc\" > ~/hist.txt`,\n        language: \"bash\"\n      }, {\n        name: \"Windows\",\n        content: `sqlite3 History \"select datetime(last_visit_time/1000000-11644473600,'unixepoch'), url \\\\\nfrom urls order by last_visit_time desc\" > %userprofile%\\hist.txt`,\n        language: \"bash\"\n      }]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Check your user folder. A file called \", _jsx(_components.code, {\n        children: \"hist.txt\"\n      }), \" should be there. Move the file to a suitable place for this exercise.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"(This process brought to you by the brilliant people on \", _jsx(_components.a, {\n        href: \"https://superuser.com/questions/602252/can-chrome-browser-history-be-exported-to-an-html-file\",\n        children: \"Stack Exchange\"\n      }), \")\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Import the needed libraries, \", _jsx(_components.code, {\n        children: \"numpy\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"pandas\"\n      }), \":\"]\n    }), \"\\n\", _jsx(MultiCode, {\n      tabs: [{\n        name: \"main.py\",\n        content: `import pandas as pd\nimport numpy as np`\n      }]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Clean Up Data\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"That data that we pulled is extremely messy. Here's an example row:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-wiki\",\n        children: \"2017-11-12 21:10:11|https://news.ycombinator.com/item?id=15678587\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We need to split on that vertical bar while making sure not to split on a bar in the URL itself.\\nSince Pandas probably doesn't do this out of the box, let's write a custom import function:\"\n    }), \"\\n\", _jsx(MultiCode, {\n      tabs: [{\n        name: \"main.py\",\n        content: `# ...continued from previous code block...\n# Open our file\nwith open('hist.txt') as f:\n    content = f.readlines()\n# Strip whitespace then split on first occurrence of pipe character\nraw_data = [line.split('|', 1) for line in [x.strip() for x in content]]\n# We now have a 2D list.\nprint(raw_data[1])`,\n        language: \"python\"\n      }, {\n        name: \"Result\",\n        content: `['2017-11-12 21:09:21', 'https://news.ycombinator.com/']`,\n        language: \"wiki\"\n      }]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Using our 2D list, let's make a Pandas DataFrame with custom column headers and make sure it is working:\"\n    }), \"\\n\", _jsx(MultiCode, {\n      tabs: [{\n        name: \"main.py\",\n        content: `# ...continued from previous code block...\ndata = pd.DataFrame(raw_data, columns=['datetime', 'url'])\ndata.head(1)`,\n        language: \"python\"\n      }]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \" \"\n          }), _jsx(_components.th, {\n            children: \"datetime\"\n          }), _jsx(_components.th, {\n            children: \"url\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"0\"\n          }), _jsx(_components.td, {\n            children: \"2017-11-12 21:10:11\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://news.ycombinator.com/item?id=15678587\",\n              children: \"https://news.ycombinator.com/item?id=15678587\"\n            })\n          })]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now, we're almost done with ingesting the data. Let's convert the datetime string column into a\\ncolumn of Pandas \", _jsx(_components.code, {\n        children: \"datetime\"\n      }), \" elements and double-check that it is indeed a Pandas timestamp:\"]\n    }), \"\\n\", _jsx(MultiCode, {\n      tabs: [{\n        name: \"main.py\",\n        content: `# ...continued from previous code block...\ndata.datetime = pd.to_datetime(data.datetime)\ndata.datetime[0]`,\n        language: \"python\"\n      }]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Finally, let's remove all information from the URL, leaving only the domain/subdomain and check our work again:\"\n    }), \"\\n\", _jsx(MultiCode, {\n      tabs: [{\n        name: \"main.py\",\n        content: `# ...continued from previous code block...\nfrom urllib.parse import urlparse\nparser = lambda u: urlparse(u).netloc\ndata.url = data.url.apply(parser)\ndata.head(1)`,\n        language: \"python\"\n      }]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \" \"\n          }), _jsx(_components.th, {\n            children: \"datetime\"\n          }), _jsx(_components.th, {\n            children: \"url\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"0\"\n          }), _jsx(_components.td, {\n            children: \"2017-11-12 21:10:11\"\n          }), _jsx(_components.td, {\n            children: \"news.ycombinator.com\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Finally, our data is clean.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Analyzing the Data\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that the boring part is done, let's analyze our browsing data.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Most Visited Sites\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's generate a list of our top sites sorted by frequency, then print out the first two to get our most visited sites:\"\n    }), \"\\n\", _jsx(MultiCode, {\n      tabs: [{\n        name: \"main.py\",\n        content: `# ...continued from previous code block...\n# Aggregate domain entries\nsite_frequencies = data.url.value_counts().to_frame()\n# Make the domain a column\nsite_frequencies.reset_index(level=0, inplace=True)\n# Rename columns to appropriate names\nsite_frequencies.columns = ['domain', 'count']\n# Display top 2\nsite_frequencies.head(2)`,\n        language: \"python\"\n      }]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \" \"\n          }), _jsx(_components.th, {\n            children: \"domain\"\n          }), _jsx(_components.th, {\n            children: \"count\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"0\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"http://www.google.com\",\n              children: \"www.google.com\"\n            })\n          }), _jsx(_components.td, {\n            children: \"3904\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"1\"\n          }), _jsx(_components.td, {\n            children: \"github.com\"\n          }), _jsx(_components.td, {\n            children: \"1571\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It should come as no shock that my top sites, just like any other dev, were Google and Github.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"(Is secretly surprised that Stack Overflow was not one of the top ten)\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now, let's see our top sites in a beautiful chart:\"\n    }), \"\\n\", _jsx(MultiCode, {\n      tabs: [{\n        name: \"main.py\",\n        content: `# ...continued from previous code block...\nimport matplotlib.pyplot as plt\ntopN = 20\nplt.figure(1, figsize=(10,10))\nplt.title('Top $n Sites Visited'.replace('$n', str(topN)))\npie_data = site_frequencies['count'].head(topN).tolist()\npie_labels = None\n# Uncomment to get specific domain names\n# pie_labels = site_frequencies['domain'].head(topN).tolist()\nplt.pie(pie_data, autopct='%1.1f%%', labels=pie_labels)\nplt.show()`,\n        language: \"python\"\n      }]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/post-images/browser-hist-graph.jpg\",\n      width: 500,\n      height: 500,\n      className: \"mx-auto\",\n      alt: \"browser history graph\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"What else can we do with the data? A lot, I'm sure, since this is the Holy Grail for ad tracking\\ncompanies.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Analyzing Browser History Using Python and Pandas","description":"Explore the depths of your browser history with this introductory data science tutorial.","date":1510516800000,"displayDate":"November 12, 2017","tags":["Legacy Content"]}},"frontMatter":{"title":"Analyzing Browser History Using Python and Pandas","description":"Explore the depths of your browser history with this introductory data science tutorial.","date":1510516800000,"displayDate":"November 12, 2017","tags":["Legacy Content"]}},"__N_SSG":true}